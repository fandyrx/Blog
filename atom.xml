<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fandyrx.github.io/blog/</id>
    <title>前端笔记</title>
    <updated>2022-09-12T15:23:05.163Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fandyrx.github.io/blog/"/>
    <link rel="self" href="https://fandyrx.github.io/blog/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://fandyrx.github.io/blog/images/avatar.png</logo>
    <icon>https://fandyrx.github.io/blog/favicon.ico</icon>
    <rights>All rights reserved 2022, 前端笔记</rights>
    <entry>
        <title type="html"><![CDATA[原型链]]></title>
        <id>https://fandyrx.github.io/blog/post/yuan-xing-lian/</id>
        <link href="https://fandyrx.github.io/blog/post/yuan-xing-lian/">
        </link>
        <updated>2022-09-12T10:07:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一重点-object对象都有__proto__这个属性指向某一个原型对象">一.重点: Object(对象)都有__proto__这个属性,指向某一个原型对象</h1>
<h1 id="二前置知识-proto隐式原型-prototype显式原型-以下对象属性保存的是指针">二.前置知识 <strong>proto</strong>:隐式原型 prototype:显式原型 (以下对象属性,保存的是指针)</h1>
<p>1.每个构造函数都有一个显式原型</p>
<p>2.每个对象都有__proto__隐式原型 属性</p>
<p>3.实例对象是由构造函数 new 出来的 new Function创造函数 new Object 创造对象</p>
<p>4.原型对象 身上都有.constructor ,<strong>proto</strong> 两个属性</p>
<p>5.__proto__指向 构造函数的 实例对象</p>
<ol start="6">
<li>
<p>Object.prototype.<strong>proto</strong> 指向null 原型链的终点</p>
</li>
<li>
<p>所有函数的__proto__ 都是一样的 ,new Function 生成</p>
</li>
</ol>
<h3 id="所谓原型链当我使用实例对象tian我自己定义的的方法数据实例本身没有时候会往他的原型对象查找__proto__指向">所谓原型链::当我使用实例对象Tian(我自己定义的)的方法/数据,实例本身没有时候,会往他的原型对象查找(__proto__指向)</h3>
<ul>
<li>
<p>1.__proto__指向了原型对象</p>
</li>
<li>
<ol start="2">
<li>实例对象的 [构造函数(构造者/一些抽象的属性,方法) ]的 原型对象</li>
</ol>
</li>
</ul>
<p><img src="https://fandyrx.github.io/blog//post-images/1662978240999.png" alt="" loading="lazy"><br>
<img src="https://fandyrx.github.io/blog//post-images/1662978246082.png" alt="" loading="lazy"></p>
<h2 id="原型链例子">原型链例子</h2>
<p>一. 第四个链稍微有点绕,所有函数 都由new Function() 产生 所以函数的隐式原型为Function 原型对象<br>
二. 而Function(){} 构造函数又由 Function构造函数生成<br>
三. Object(){} 构造函数 也由 Function构造函数生成<br>
四. 所以Object和Function 两个构造函数 的隐式原型 都指向了 Function 原型对象</p>
<ul>
<li>eg: 1. obj = new Object()       f = new Function()<br>
--  1.1   obj为对象            实例对象 f 为   函数(类/函数?)new 出来的实例对象<br>
--  1.2   Object( )为对象的构造函数 ----- Function() 为函数的构造函数
<ul>
<li>2.实例对象的隐式原型 指向其构造函数的 显式原型<br>
一.构造函数Function(){} =( <strong>proto</strong>) &gt; Function原型对象 =(<strong>proto</strong>)&gt;<br>
构造函数Object.prototype ==(<strong>proto</strong>)&gt;&gt; null</li>
</ul>
</li>
</ul>
<p>二.     f函数实例 ==(<strong>proto</strong>)&gt;&gt; Function原型对象 ==(<strong>proto</strong>)&gt;&gt;<br>
构造函数Object.prototype ==(<strong>proto</strong>)&gt;&gt; null<br>
三.obj对象实例 ==( <strong>proto</strong>)&gt;&gt; 构造函数Object.prototype ==(<strong>proto</strong>)&gt;&gt; null</p>
<p>四. 构造函数Object(){}.(<strong>proto</strong>) ==&gt; Function原型对象</p>
<h2 id="例子详解图">例子详解图</h2>
<figure data-type="image" tabindex="1"><img src="https://fandyrx.github.io/blog//post-images/1662978997403.jpg" alt="" loading="lazy"></figure>
<h2 id="解释">解释</h2>
<hr>
<ol>
<li>什么是原型：<br>
任何对象实例都有一个原型，也叫原型对象，这个原型对象由对象的内置属性_proto_指向它的构造函数的 prototype 指向的对象，即任何对象都是由一个 构造函数创建的，但是不是每一个对象都有 prototype，只有方法才有 prototype。</li>
</ol>
<p>2.什么是原型链？<br>
原型链基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。<br>
我们知道，每个构造函数都有一个原型对象，每个原型对象都有一个指向构造函数的指针，而实例又包涵一个指向原型对象的内部指针。</p>
<p>3.原型链的核心就是依赖对象的_proto_的指向，当自身不存在的属性时，就 一层层的扒出创建对象的构造函数，直至到 Object 时，就没有_proto_指向了。<br>
因为_proto_实质找的是 prototype，所以我们只要找这个链条上的构造函数的 prototype。其中 Object.prototype 是没有_proto_属性的，它==null。每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而  实例都包含指向原型对象内部的指针。我们让原型对象（1）等于另一个原型对象的实例（2）,此时原型对象（2）将包含一个指向原型对象（1）的指针，再让原型对象（2）的实例等于原型对象（3），如此层层递进就构成了实例和原型的链条，这就是原型链的概念.</p>
<p>4.每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数想指针   (constructor)，而实例对象都包含一个指向原型对象的内部指针(<strong>proto</strong>)。如果让原型对象等于另一个原型对象的实例，此时的原型对象将包含一个指向另 一个原型的指针(<strong>proto</strong>)，另一个原型也包含着一个指向另一个构造函数的 指针(constructor)。假如另一个原型又是另一个类型的实例……这就构成了实例与原型的链条。也叫原型链.</p>
<ol start="5">
<li>原型继承是 js 的一种继承方式，原型链作为实现继承的主要方法,其基本思路是利用原型让一个引用类型继承另一个引用类型的属性和方法,<br>
原型继承：利用原型中的成员可以被和其相关的对象共享这一特性，可以实现继承，这种实现继承的方式，就叫做原型继承</li>
</ol>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[23.instanceof 原理手写]]></title>
        <id>https://fandyrx.github.io/blog/post/23instanceof-yuan-li-shou-xie/</id>
        <link href="https://fandyrx.github.io/blog/post/23instanceof-yuan-li-shou-xie/">
        </link>
        <updated>2022-09-12T10:04:00.000Z</updated>
        <content type="html"><![CDATA[<p>原理: 原型链中,构造函数的显式原型prototype指向 ,  和该实例对象的隐式原型__propto__指向 一致,两者指向同一个原型对象</p>
<pre><code>  // 1.构造函数
function Person (name){
  this.name = name
}

//2.实例 
 let obj = new Person('张三')
//检验 
 console.log(Object.getPrototypeOf(obj),'实例对象的原型(隐式原型)');
 console.log(obj.prototype,'实例对象的原型/查找不到');
 console.log(Person.prototype,'构造函数的原型');

 console.log(obj instanceof Person,'实例是否Person构造函数的类');

  console.log(instance(obj,Person),'手写');

 //3.手写  复现instanceof
  //参数意义: left 实例   right 构造函数
 function instance(left,right){
  //获取  实例对象 的隐式原型
    let proto = Object.getPrototypeOf(left)
  //获取  构造函数的 显式原型
    let prototype = right.prototype

   
      if(!proto){
        //基础数据类型没有原型
        return  false
      }
      if(proto === prototype){
        return true
      }
      //如果第一层没找到,继续在原型链上找
      proto = Object.getPrototypeOf(proto)
    
 }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数组方法:slice,splice,reverse,sort]]></title>
        <id>https://fandyrx.github.io/blog/post/shu-zu-fang-fa-slicesplicereversesort/</id>
        <link href="https://fandyrx.github.io/blog/post/shu-zu-fang-fa-slicesplicereversesort/">
        </link>
        <updated>2022-09-12T09:49:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1reverse-改变原数组">1.reverse()        //改变原数组</h2>
<pre><code>- 翻转数组
</code></pre>
<h2 id="2sortfn-改变原数组">2.sort(fn)       //改变原数组</h2>
<pre><code>-  数组排序:根据fn 的返回值  fn(a,b){ return ? }

		// 数组方法 sort()   可以传入排序函数, a-b 代表数组任意对比的元素
		//  返回值 &gt; 0    a 放在 b 后面
		//  返回值 &lt; 0    a  放在 b 前面
		//  返回值 = 0   位置不变
- 按照ASCII码排序,直接使用有误差
</code></pre>
<pre><code>//奇数偶数
  		function f3(a, b) {
  			//排序函数
  			var a = a % 2; //获取参数a的奇偶性
  			var b = b % 2; //获取参数b的奇偶性
  			if (a == 0) return 1; //如果参数a为偶数，则排在左边
  			if (b == 0) return -1; //如果参数b为偶数，则排在右边
  		}
  		var a3 = [3, 1, 2, 4, 5, 7, 6, 8, 0, 9]; //定义数组
  		a3.sort(f3); //根据数字大小由大到小进行排序
  		console.log(a3,&quot;a3&quot;); //返回数组[3,1,5,7,9,0,8,6,4,2]
  ``` 
// 中文排序   return   a.localeCompare(b)
                                 
## 3. slice (start,end) 截取  //不修改原数组
从statr索引,截取end 位,并且返回 ,不修改原数组
- 等于 ctrl +c 
arr.slice(0,1) 代表索引0 开始,截取一位 返回.    

## 4.splice(start,end)   切取  //修改原数组
同slice 但会改变原数组  
- 等于 ctrl+x
arr.splice(0,1) 代表索引0 开始,切取1位, 返回.    

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS 类型判断]]></title>
        <id>https://fandyrx.github.io/blog/post/js-lei-xing-pan-duan/</id>
        <link href="https://fandyrx.github.io/blog/post/js-lei-xing-pan-duan/">
        </link>
        <updated>2022-09-12T09:39:03.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>1.typeof<br>
数组、对象、null都会被判断为object，其他判断都正确</li>
</ul>
<pre><code>    console.log(typeof 'str');           // string

    console.log(typeof {});              // object
    console.log(typeof undefined);       // undefined
    console.log(typeof null);            // object
</code></pre>
<ul>
<li>2 .instanceof只能正确判断引用数据类型<pre><code>  console.log(2 instanceof Number);                    // false
  console.log('str' instanceof String);                // false 
      
  console.log([] instanceof Array);                    // true
  console.log(function(){} instanceof Function);       // true
  console.log({} instanceof Object);                   // true
     ```
</code></pre>
</li>
<li>3.constructor</li>
</ul>
<pre><code>   console.log((true).constructor === Boolean); // true
</code></pre>
<ul>
<li>4.Object.prototype.toString.call()<br>
返回类型:[object Number]<pre><code>let a = Object.prototype.toString  

console.log(a.call(function(){})); // [object Function]
console.log(a.call({})); // [object Object]
console.log(a.call(undefined)); // [object Undefined]
console.log(a.call(null)); // [object Null]
</code></pre>
</li>
</ul>
<pre><code></code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS基础]]></title>
        <id>https://fandyrx.github.io/blog/post/js-ji-chu/</id>
        <link href="https://fandyrx.github.io/blog/post/js-ji-chu/">
        </link>
        <updated>2022-09-12T09:29:15.000Z</updated>
        <content type="html"><![CDATA[<p>obj.style[attr]<br>
为什么需要写成obj.style[attr]，而不能写成obj.style.attr?<br>
因为传入的 attr = 'width' ,是带引号的，<br>
即 obj.style.width === obj.style['width']；</p>
<p>1.获取DOM元素  element<br>
classList<br>
elment .classList    属性返回元素的类名，作为 DOMTokenList 对象。<br>
用于在元素中添加，移除及切换 CSS 类。<br>
classList 属性是只读的，但你可以使用 add() 和 remove() 方法修改它。</p>
<ol start="2">
<li>element.getAttribute('想获取的属性')<br>
element.setAttribute('设置的类名',值)   值为空则等同remove 掉</li>
</ol>
<p>合并时, concat () 好像不大好用,  将   拼接好(新添加和旧存在 )的类名  setAttribute 覆盖掉CLASS就可以.</p>
<p>下拉框例子<br>
let spans = document.querySelectorAll('.menuSpan')<br>
//默认打开 第一个,存储打开的菜单<br>
let openDiv = spans[0].parentNode</p>
<pre><code>   for (let i =0;i &lt; spans.length ; i++){
    spans[i].onclick = function() {
        let parentDiv =  this.parentNode;
        let begin = parentDiv.offsetHeight 
</code></pre>
<p>classValue = parentDiv.getAttribute('class')<br>
// //1.getAttribute() 获取属性, setAttribute修改/删除属性   replace替换<br>
//   if(parentDiv.getAttribute('class')){<br>
//     if(parentDiv.getAttribute('class').indexOf('collapsed') !== -1){<br>
//        newClass = classValue.replace('collapsed','')<br>
//        parentDiv.setAttribute(&quot;class&quot;, newClass)</p>
<pre><code>      //       //打开时,关闭前一个 并存储当前菜单元素
      //       if( openDiv != parentDiv ){
      //         openDiv.setAttribute(&quot;class&quot;,'collapsed')
      //       }
      //       //更新打开的span
      //       openDiv = parentDiv  
</code></pre>
<p>3.封装 获取任意css 样式</p>
<p>//获取任意css 样式<br>
function getStyle(obj,name) {</p>
<p>// 获取样式<br>
if(window.getComputedStyle){<br>
return getComputedStyle(obj,null)[name];<br>
}else{<br>
// ie8<br>
return obj.currentStyle[name];<br>
}<br>
}</p>
<p>4.封装  移动JS动画   利用定时器,<br>
//对象,属性(left ,top with ,height),target(目标数值),speed,回调<br>
function move(obj,attr,target,speed,callback) {<br>
//关闭上一个定时器<br>
clearInterval(obj.timer)<br>
//元素当前距离父元素左边距离  let current = obj.offsetLeft   动态获取,对象的某个属性<br>
// let current = obj.offsetLeft<br>
let current = parseInt(getStyle(obj,attr))<br>
//用户传入一个正的数值,内部根据当前位置,判断应该+或-<br>
//如果当前距离   &gt;  目标距离   移动speed 取反,  例子:800 向 0移动    小于时,0 向 800 speed 为正<br>
if(current &gt; target){<br>
speed = - speed;<br>
}<br>
//通过定时器做动画效果  : 定位的 Left 改变<br>
obj.timer = setInterval(() =&gt; {<br>
// let oldValue = obj.offsetLeft<br>
//  这个方法是因为 getStyle 自己封装方法,获取的带有PX ,需要parseInt转换为数字才能计算<br>
let oldValue = parseInt(getStyle(obj,attr))</p>
<pre><code>  //旧值 加上 speed 为每次移动的距离   即为当前最新值,动态赋予left即可移动
  let newValue = oldValue + speed;
  //向左移动 newValue 比目标 小 ?
  //向右移动,判断是否比target大  
  //newValue 小于 目标值 ,则让new 等于目标的位置 ,防止超过/不停止
  if((speed &lt; 0 &amp;&amp; newValue &lt; target) || (speed &gt;0 &amp;&amp; newValue &gt; target)){
    newValue = target
  }

  obj.style[attr] = newValue + &quot;px&quot;;

  //到达目标清除计时器,停止动画
  if(newValue == target) {
    clearInterval(obj.timer);
    callback &amp;&amp; callback();

  } 
</code></pre>
<p>}, 30);</p>
<p>}</p>
]]></content>
    </entry>
</feed>